# Pipeline CI/CD - Adote Fácil
name: CI/CD Pipeline

# Eventos que acionam o pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Variáveis de ambiente globais
env:
  NODE_VERSION: '20'
  POSTGRES_DB: adote_facil
  POSTGRES_HOST: adote-facil-postgres
  POSTGRES_PORT: 5432
  POSTGRES_CONTAINER_PORT: 6500

# Jobs do pipeline
jobs:
  # Job 1: Análise de código e segurança
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Instalar dependências do backend
        run: |
          cd backend
          npm ci

      - name: Instalar dependências do frontend
        run: |
          cd frontend
          npm ci

      - name: Lint do backend
        run: |
          cd backend
          npm run lint

      - name: Lint do frontend
        run: |
          cd frontend
          npm run lint

      - name: Verificar vulnerabilidades do backend
        run: |
          cd backend
          npm audit --audit-level=high

      - name: Verificar vulnerabilidades do frontend
        run: |
          cd frontend
          npm audit --audit-level=high

  # Job 2: Testes unitários e de integração
  test:
    runs-on: ubuntu-latest
    needs: code-analysis
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Instalar dependências do backend
        run: |
          cd backend
          npm ci

      - name: Configurar variáveis de ambiente para testes
        run: |
          cd backend
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env.test
          echo "POSTGRES_HOST=localhost" >> .env.test
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.test
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.test
          echo "POSTGRES_PORT=5432" >> .env.test

      - name: Executar testes unitários do backend
        run: |
          cd backend
          npm test -- --coverage --watchAll=false

      - name: Executar testes de integração do backend
        run: |
          cd backend
          npm test -- --testPathPattern=integration --coverage --watchAll=false

      - name: Upload cobertura de testes do backend
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Instalar dependências do frontend
        run: |
          cd frontend
          npm ci

      - name: Executar testes E2E do frontend
        run: |
          cd frontend
          npm run cypress:run
        env:
          CYPRESS_baseUrl: http://localhost:3000

      - name: Upload screenshots do Cypress (se houver falhas)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots/
          retention-days: 7

      - name: Upload vídeos do Cypress
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend/cypress/videos/
          retention-days: 7

  # Job 3: Build e análise de imagens Docker
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub (se necessário)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build das imagens Docker
        run: |
          docker compose build --no-cache

      - name: Análise de segurança das imagens
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image adote-facil-backend:latest --severity HIGH,CRITICAL --exit-code 1 || true
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image adote-facil-frontend:latest --severity HIGH,CRITICAL --exit-code 1 || true

      - name: Push das imagens (apenas na main)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag adote-facil-backend:latest ${{ secrets.DOCKER_USERNAME }}/adote-facil-backend:latest
          docker tag adote-facil-frontend:latest ${{ secrets.DOCKER_USERNAME }}/adote-facil-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/adote-facil-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/adote-facil-frontend:latest

  # Job 4: Testes de integração com containers
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar variáveis de ambiente
        run: |
          cd backend
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_CONTAINER_PORT=${{ env.POSTGRES_CONTAINER_PORT }}" >> .env

      - name: Subir containers para testes
        run: |
          docker compose up -d
          sleep 30

      - name: Verificar saúde dos serviços
        run: |
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Executar testes de integração
        run: |
          cd backend
          npm test -- --testPathPattern=integration --watchAll=false

      - name: Parar containers
        if: always()
        run: docker compose down

  # Job 5: Deploy (apenas na main)
  deploy:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Deploy para produção
        run: |
          echo "Deploy para produção seria executado aqui"
          echo "Pode ser integrado com AWS, Azure, GCP, etc."

      - name: Notificar sucesso do deploy
        run: |
          echo "Deploy realizado com sucesso!"
          # Aqui você pode adicionar notificações para Slack, Discord, etc.

  # Job 6: Geração de artefatos
  artifacts:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar relatório de cobertura
        run: |
          mkdir -p reports
          echo "# Relatório de Cobertura de Testes" > reports/coverage-report.md
          echo "Data: $(date)" >> reports/coverage-report.md
          echo "Branch: ${{ github.ref }}" >> reports/coverage-report.md
          echo "Commit: ${{ github.sha }}" >> reports/coverage-report.md

      - name: Gerar arquivo ZIP do projeto
        run: |
          zip -r adote-facil-release.zip . \
            -x '*.git*' '*.github*' 'node_modules/*' 'coverage/*' 'cypress/videos/*' 'cypress/screenshots/*'

      - name: Upload artefatos
        uses: actions/upload-artifact@v4
        with:
          name: adote-facil-release-${{ github.run_number }}
          path: |
            adote-facil-release.zip
            reports/
          retention-days: 30
